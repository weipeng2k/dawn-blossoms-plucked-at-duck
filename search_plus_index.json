{"./":{"url":"./","title":"朝花夕拾-简介","keywords":"","body":"朝花夕拾（dawn-blossoms-plucked-at-dusk）         《朝花夕拾》，是鲁迅先生的散文文集，收录了他十篇回忆性散文，意思是回忆往事，旧事重提。笔者回顾十多年开发过程中的点点滴滴，也想将其记录下来，因此借用先生的文集名字，一来做好总结与提炼，二来让读者也能从中有些受益，想必先生不会怪罪。         回想开发中的点点滴滴是挺耗费精力的，所幸笔者日常有些总结的嗜好，因此还好，想起来就会补充进来。而提炼的过程是有些意思的，要讲清楚这些点滴解决了什么问题，当然也要给出如何解决的模式或者简单的工具。 这里的工具可能是一段代码，也可能是一个程序，还有可能是一种模式化的思路         我的《朝花夕拾》着重于开发过程，当问题来临时，我们如何设计软件的概念模型，如何组织软件的物理模型，如何将我们的应用的扩展性和可维护性做到极致，这是它需要探讨的。当然，软件系统是实现业务系统化的方式，但背后的本质是人，这里的人不仅包括了使用软件的客户，也包括了运营、产品、测试和作为开发的你，我想我也会讨论一些关于如何同这些人更好配合的方式，以及如何做一个更好的技术团队。 开发过程是充满创造力的过程，我们乐此不疲，我们希望自己的劳动能被人尊重和欣赏，技术人总是单纯的，而世界也因为这份单纯而改变          By dawn-blossoms-plucked-at-dusk，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2022-04-23 15:45:08 "},"ABOUTME.html":{"url":"ABOUTME.html","title":"朝花夕拾-关于作者","keywords":"","body":"关于作者         魏鹏（花名：豫楚），原阿里巴巴集团高级技术专家，2009年硕士研究生毕业加入阿里巴巴中国网站技术部，2021年从阿里云离职，在阿里工作12年，在阿里巴巴多个部门工作过。主要经历有三段：         第一段，提升技术能力。2009年硕士研究生毕业加入阿里巴巴中国网站技术部，曾担任中国网站交易平台架构师，主导了交易系统服务化工作，设计实现的数据迁移系统高效的完成了阿里巴巴中国网站交易数据到阿里巴巴集团的迁移工作；         第二段，耕耘技术深度。2013年在阿里巴巴中间件技术部的应用容器与服务框架组，从事（后负责）Java应用容器Pandora和服务框架HSF的相关工作，其中Java应用容器Pandora是阿里巴巴中间件运行的基础，而服务框架HSF则是阿里巴巴集团实现服务化的主要解决方案，二者在阿里巴巴拥有最为广泛的使用量；         第三段，实践技术架构。2018年在阿里巴巴新零售事业群旗下的零售通技术部，负责品牌任务和货架，带领团队，实践微服务架构改造，支撑复杂业务场景，将一个（新的）渠道多角色参与场景，从原有开发耗时16人周缩短到不到1人周，并保证系统的高可靠性，高效的支持了前线作业；         个人平时喜欢阅读技术书籍，与同事合著了《Java并发编程的艺术》一书，并翻译一些国外优秀文档，爱总结，喜分享，对Java应用容器、多线程编程、微服务架构以及分布式系统感兴趣，深知 “路漫漫其修远兮，吾将上下而求索” ，希望能够和大家多多交流共同进步。 By dawn-blossoms-plucked-at-dusk，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2022-04-23 15:45:08 "},"book/dbp@d-outline.html":{"url":"book/dbp@d-outline.html","title":"朝花夕拾-大纲","keywords":"","body":"大纲         《朝花夕拾》是开发过程中的一些经验总结，因此我会将这些经验一条条的罗列出来并加以解释。每条经验总结都是应对一个问题，然后阐述解决方案，最终讲明白我们这么做的好处。一般来说对于一个问题，解法会有很多，而本文中的解法并不一定是最好的，但一定是作者实际验证并在生产环境中使用过的。         本文中涉及的经验总结不仅包括编码还包括：测试、持续集成、架构设计与应用治理，按照经验总结的名称和分类来介绍经验，以及解决的问题和该经验加入的时间。 名称 分类 问题 方案 加入时间 项目结构模块化 编码&架构设计 易理解且可维护的项目框架 工具 2021.06 DAO模式与工具 编码 标准且可维护的持久层构建 工具 2021.06 混合数据源与组件 编码&架构设计 面向可持续扩展的数据层 工具 2021.06 日志打印与规范 编码&应用治理 日志原则与可观测的系统 规范 2021.06 服务接口设计与实现 架构设计&应用治理 在不确定的业务环境下求取确定性的设计 规范 2021.06 事件体系的设计与实现 架构设计 面向可维护事件机制的建立 设计 2021.06 缓存的集成与使用 编码 正确和无副作用的使用缓存 规范 2021.06 数据类型转换 编码 高效的转换数据类型 规范 2021.06 代码提交日志约束 编码&应用治理 结构化的提交记录 规范 2021.06 责任链模式优化复杂场景 编码 复杂业务扩展的正确姿势 设计 2021.06 主表和辅表设计 编码&架构设计 更易扩展的持久层支撑业务发展 设计 2021.07 单元测试的必要性 编码&测试 避免低级错误，优化代码设计 规范 2021.07 系统指标需要持续去做 应用治理 熟悉生产系统，通过指标了解业务 规范 2021.07 建立公共组件库 架构设计 积累可复用的制成品 规范 2021.07 架构视图需要透视和缩放 架构设计&应用治理 实际的系统与架构图要一一对应 规范 2021.07 织女星与矩阵架构 架构设计 平台架构和服务中心架构的解决思路 设计 2021.07 详细说明         上述经验总结只是简单的介绍了它们用何种方案去解决的哪个问题，但问题本身、解决方案以及好处是什么需要详细的说明。 项目结构模块化         在创建一个应用的codebase时，我们是选择单工程还是多（子）工程，该如何分割，使得项目能让多个开发同学形成共识进入开发，同时具备不错的维护性。         本章节介绍一种实践考证，具备良好维护性和快速上手的项目划分方式，同时给出一个简单的工具，用于微服务（基于SpringBoot）的应用骨架生成。 By dawn-blossoms-plucked-at-dusk，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2022-04-23 15:45:08 "},"book/dbp@d-chapter1.html":{"url":"book/dbp@d-chapter1.html","title":"朝花夕拾-项目结构模块化","keywords":"","body":"项目结构模块化         在创建一个应用的codebase时，我们遇到的问题是如何定义这个项目的骨架，可以简单的建立一个工程，里面用package进行分割，如果这样的话，代码都堆积在一起，后续的维护性就大打折扣。我们在关注应用的类或领域设计之前，最好将应用的主要模块确定好，这样有一个统一的视角去应对问题。         推荐按照业务领域模块维度去建立多个子项目（模块），这样做会让应用面对问题域时更有层次感，而这种层次感会使得我们注重底层模块的稳定，提升整个应用的可维护性。         项目的分拆方式还是类似三层架构，也就是API/Service和DAL层，在代码属于快消品的时代，更多的追求是模块的复用性和可维护性，在类即某些细节的适配上，个人不建议投入过多，比如：采用什么六边形架构，开发者没有义务在这些华而不实或不具备实践考证的体系结构上浪费太多时间，我们需要的是不错的维护性以及快速上手的舒适性。 By dawn-blossoms-plucked-at-dusk，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2022-04-23 15:45:08 "}}